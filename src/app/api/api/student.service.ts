/**
 * Demo App
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Activity } from '../model/activity';
import { Notice } from '../model/notice';
import { Student } from '../model/student';
import { TuitionFee } from '../model/tuitionFee';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StudentService {

    protected basePath = 'https://virtserver.swaggerhub.com/xuyendangvan/DemoAPI/1.0.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add a new student to the system
     * 
     * @param body Student object that needs to be added to the system
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addStudent(body: Student, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addStudent(body: Student, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addStudent(body: Student, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addStudent(body: Student, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addStudent.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/students`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes student by id
     * Delete the student according to ID
     * @param id ID value that needs to be considered for filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteStudentByID(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteStudentByID(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteStudentByID(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteStudentByID(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteStudentByID.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/students/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds student&#39;s activity by student id
     * Find the activity according to ID
     * @param id ID value that needs to be considered for filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findStudentActivityByID(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Activity>>;
    public findStudentActivityByID(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Activity>>>;
    public findStudentActivityByID(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Activity>>>;
    public findStudentActivityByID(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findStudentActivityByID.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Activity>>(`${this.basePath}/students/${encodeURIComponent(String(id))}/activity`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds student by id
     * Find the student according to ID
     * @param id ID value that needs to be considered for filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findStudentByID(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Student>>;
    public findStudentByID(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Student>>>;
    public findStudentByID(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Student>>>;
    public findStudentByID(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findStudentByID.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Student>>(`${this.basePath}/students/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds list student by range id
     * Find the list student according to range ID
     * @param startIndex start index value that needs to be considered for filter
     * @param offset the number of records that needs to be considered for filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findStudentListByIndex(startIndex: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Student>>;
    public findStudentListByIndex(startIndex: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Student>>>;
    public findStudentListByIndex(startIndex: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Student>>>;
    public findStudentListByIndex(startIndex: number, offset?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (startIndex === null || startIndex === undefined) {
            throw new Error('Required parameter startIndex was null or undefined when calling findStudentListByIndex.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startIndex !== undefined && startIndex !== null) {
            queryParameters = queryParameters.set('startIndex', <any>startIndex);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Student>>(`${this.basePath}/students`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds student&#39;s notice by student id
     * Find the notice fee according to student ID
     * @param id ID value that needs to be considered for filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findStudentNoticeByID(id: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Notice>>;
    public findStudentNoticeByID(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Notice>>>;
    public findStudentNoticeByID(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Notice>>>;
    public findStudentNoticeByID(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findStudentNoticeByID.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Notice>>(`${this.basePath}/students/${encodeURIComponent(String(id))}/notice`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds student&#39;s tuition fee by student id
     * Find the tuition fee according to student ID
     * @param sid ID value that needs to be considered for filter
     * @param qid quater ID value that needs to be considered for filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findStudentTuitionFeeByID(sid: number, qid: number, observe?: 'body', reportProgress?: boolean): Observable<TuitionFee>;
    public findStudentTuitionFeeByID(sid: number, qid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TuitionFee>>;
    public findStudentTuitionFeeByID(sid: number, qid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TuitionFee>>;
    public findStudentTuitionFeeByID(sid: number, qid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (sid === null || sid === undefined) {
            throw new Error('Required parameter sid was null or undefined when calling findStudentTuitionFeeByID.');
        }

        if (qid === null || qid === undefined) {
            throw new Error('Required parameter qid was null or undefined when calling findStudentTuitionFeeByID.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sid !== undefined && sid !== null) {
            queryParameters = queryParameters.set('sid', <any>sid);
        }
        if (qid !== undefined && qid !== null) {
            queryParameters = queryParameters.set('qid', <any>qid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TuitionFee>(`${this.basePath}/students/tuitionfee`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing student
     * 
     * @param body Student object that needs to be updated
     * @param id ID value that needs to be considered for filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateStudent(body: Student, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateStudent(body: Student, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateStudent(body: Student, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateStudent(body: Student, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateStudent.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateStudent.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/students/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing student status
     * 
     * @param id ID value that needs to be considered for filter
     * @param status status of the student: 1-arrived school, 0- leave school
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateStudentStatus(id: number, status: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateStudentStatus(id: number, status: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateStudentStatus(id: number, status: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateStudentStatus(id: number, status: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateStudentStatus.');
        }

        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling updateStudentStatus.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];

        return this.httpClient.put<any>(`${this.basePath}/student/status`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
